{"version":3,"sources":["Header/AgletLogoOutline.png","List/ListItem.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UpdateMutation","gql","graphql","name","props","className","complete","toString","onClick","click","Header","src","AgletLogo","alt","TodosQuery","App","updateTodo","todo","a","variables","id","removeTodo","this","data","loading","todos","style","display","margin","width","map","text","React","Component","compose","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,8C,gbCK3C,IAAMC,EAAiBC,IAAH,KAgBJC,kBAAQF,EAAgB,CAACG,KAAM,cAA/BD,EAVhB,SAAkBE,GACd,OACI,yBAAKC,UAAY,QACb,4BAAKD,EAAMD,MACX,2BAAIC,EAAME,SAASC,YACnB,4BAAQC,QAAWJ,EAAMK,OAAzB,c,yBCHIC,MAThB,WACI,OACI,yBAAKL,UAAY,cACb,yBAAKM,IAAOC,IAAWC,IAAM,aAAaR,UAAY,iBACtD,uD,2TCEZ,IAAMS,EAAab,IAAH,KAUVD,EAAiBC,IAAH,KAMdc,E,4MACJC,W,uCAAa,WAAMC,GAAN,SAAAC,EAAA,sEACL,EAAKd,MAAMY,WAAW,CAC1BG,UAAW,CACTC,GAAIH,EAAKG,GACTjB,KAAMc,EAAKd,KAAO,WAClBG,UAAWW,EAAKX,YALT,2C,wDAUbe,WAAa,SAAAJ,K,uDAIH,IAAD,SAC0BK,KAAKlB,MAA/BmB,KAAOC,EADP,EACOA,QAASC,EADhB,EACgBA,MACvB,OAAID,EACK,KAGP,6BACE,kBAAC,EAAD,MACA,yBAAKE,MAAS,CAACC,QAAS,SACtB,yBAAKD,MAAS,CAACE,OAAQ,OAAQC,MAAO,QAEjCJ,EAAMK,KAAI,SAAAb,GAAI,OACb,kBAAC,EAAD,CAAUd,KAAQc,EAAKc,KAAMzB,SAAYW,EAAKX,SAAUG,MAAS,kBAAM,EAAKO,WAAWC,gB,GA3BrFe,IAAMC,WAoCTC,sBACbhC,YAAQY,GACRZ,YAAQF,EAAgB,CAACG,KAAM,eAFlB+B,CAGbnB,GCrDkBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,0BAGPC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAgBL,OAAWA,GACzB,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c40d368.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AgletLogoOutline.d1e90b88.png\";","import React from 'react';\nimport './ListItem.css';\nimport gql from 'graphql-tag';\nimport {graphql} from 'react-apollo';\n\nconst UpdateMutation = gql`\n  mutation($id: ID!, $complete: Boolean!) {\n    updateTodo(id: $id, complete: $complete)\n  }\n`;\n\nfunction ListItem(props) {\n    return(\n        <div className = \"item\">\n            <h1>{props.name}</h1>\n            <p>{props.complete.toString()}</p>\n            <button onClick = {props.click} >Update</button>\n        </div>\n    );\n}\n\nexport default (graphql(UpdateMutation, {name: \"updateTodo\"}))(ListItem);\n\n{/* onClick = {() => this.updateTodo(todo)} */}\n","import React from 'react';\nimport './Header.css';\nimport AgletLogo from './AgletLogoOutline.png';\n\nfunction Header() {\n    return(\n        <div className = \"header-bar\">\n            <img src = {AgletLogo} alt = \"Aglet Logo\" className = \"header-image\"></img>\n            <h2>Your Sneaker Wishlist</h2>\n        </div>\n    );\n}\n\nexport default (Header);","import React from 'react';\n\nimport gql from 'graphql-tag';\nimport {graphql} from 'react-apollo';\n\nimport ListItem from './List/ListItem.js';\nimport Header from './Header/Header.js';\n\nimport {flowRight as compose} from 'lodash';\n\nconst TodosQuery = gql`\n  {\n    todos {\n      id\n      text \n      complete\n    }\n  }\n`;\n\nconst UpdateMutation = gql`\n  mutation($id: ID!, $complete: Boolean!) {\n    updateTodo(id: $id, complete: $complete)\n  }\n`;\n\nclass App extends React.Component {\n  updateTodo = async todo => {\n    await this.props.updateTodo({\n      variables: {\n        id: todo.id,\n        name: todo.name + \" updated\",\n        complete: !todo.complete\n      }\n    })\n  };\n\n  removeTodo = todo => {\n\n  };\n\n  render() {\n    const {data: {loading, todos}} = this.props;\n    if (loading) {\n      return null;\n    }\n    return (\n      <div>\n        <Header />\n        <div style = {{display: \"flex\"}}>\n          <div style = {{margin: \"auto\", width: \"80%\"}}>\n              {/*{todos.map(todo => (<div key = {`${todo.id}-todo-item`}>{todo.text}</div>))}*/}\n              {todos.map(todo => (\n                <ListItem name = {todo.text} complete = {todo.complete} click = {() => this.updateTodo(todo)}/>\n              ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  graphql(TodosQuery),\n  graphql(UpdateMutation, {name: \"updateTodo\"})\n)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from \"apollo-boost\";\nimport {ApolloProvider} from \"react-apollo\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\"\n})\n\nReactDOM.render(\n  <React.StrictMode> \n    <ApolloProvider client  = {client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}