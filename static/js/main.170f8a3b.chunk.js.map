{"version":3,"sources":["Images/AgletLogoOutline.png","Actions.js","Header/Header.js","List/ListItem.js","Entry/Entry.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CREATE","gql","RECEIVE","UPDATE","UPDATE_OWNERSHIP","DELETE","Header","className","src","AgletLogo","alt","ListItem","state","edit","itemName","props","sneaker","name","itemRank","ranking","itemPrice","price","itemColor","colorway","itemOwnership","ownership","updateSneaker","id","a","isNaN","alert","variables","refetchQueries","query","toggleButton","setState","parseFloat","getEditIcon","getOwnership","getNameElement","onChange","handleName","ref","el","inputName","e","newName","target","value","getPriceElement","toFixed","handlePrice","inputPrice","newPrice","getColorwayElement","handleColor","inputColor","newColor","this","onClick","updateOwnership","delete","React","Component","graphql","currentRank","Entry","createSneaker","type","App","deleteSneaker","console","log","data","loading","getList","style","display","margin","width","map","key","compose","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.170f8a3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AgletLogoOutline.d1e90b88.png\";","//Mutations for Aglet\nimport gql from 'graphql-tag';\n\n//Creates Object\nexport const CREATE = gql`\n  mutation($name: String!, $ranking: Int!, $price: Float!, $colorway: String!, $ownership: Boolean!) {\n    createSneaker(name: $name, ranking: $ranking, price: $price, colorway: $colorway, ownership: $ownership){\n      name\n      ranking\n      price\n      colorway\n      ownership\n    }\n  }\n`;\n\n//Receives Objects\nexport const RECEIVE = gql`\n  query {\n    getList{\n      id\n      name\n      ranking\n      price\n      colorway\n      ownership\n    }\n  }\n`;\n\n//Updates Object\nexport const UPDATE = gql`\n  mutation($id: ID!, $name: String, $ranking: Int, $price: Float, $colorway: String, $ownership: Boolean) {\n    updateSneaker(id: $id, name: $name, ranking: $ranking, price: $price, colorway: $colorway, ownership: $ownership)\n  }\n`;\n\n//Updates Ownership of Object\nexport const UPDATE_OWNERSHIP = gql`\n  mutation($id: ID!, $ownership: Boolean!) {\n    updateOwnership(id: $id, ownership: $ownership)\n  }\n`;\n\n//Deletes Object\nexport const DELETE = gql`\n  mutation($id: ID!) {\n    deleteSneaker(id:$id)\n  }\n`;","import React from 'react';\nimport './Header.css';\nimport AgletLogo from './../Images/AgletLogoOutline.png';\n\n//HTML for Header Segment\nfunction Header() {\n    return(\n        <div className = \"header-bar\">\n            <img src = {AgletLogo} alt = \"Aglet Logo\" className = \"header-image\"></img>\n            <h2 className = \"header-title\">Your Sneaker Wishlist</h2>\n            <div className = \"under-bar\"></div>\n        </div>\n    );\n}\n\nexport default (Header);","import React from 'react';\nimport './ListItem.css';\n\nimport {RECEIVE, UPDATE} from './../Actions.js';\n\nimport {graphql} from 'react-apollo';\n\n//Material Icons\nimport CloseIcon from '@material-ui/icons/Close';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';import CancelIcon from '@material-ui/icons/Cancel'; \n\n\n//HTML for a List Item (Sneaker Listing Object)\nclass ListItem extends React.Component {\n    //State Machine\n    state = {\n        edit: true,\n        itemName: this.props.sneaker.name,\n        itemRank: this.props.sneaker.ranking,\n        itemPrice: this.props.sneaker.price,\n        itemColor: this.props.sneaker.colorway,\n        itemOwnership: this.props.sneaker.ownership\n    }\n\n    //Updates Edit Values\n    updateSneaker = async (id, name, ranking, price, colorway, ownership) => {\n        if(!this.state.edit) {\n            //Error Handling: Ensures Name Has Value\n            if(name === \"\") {\n                name = this.props.sneaker.name;\n            }\n\n            //Error Handling: Ensures Price is a Float\n            if(isNaN(price)) {\n                alert(\"Please Update With a Floating Point Number\");\n                return;\n            }\n\n            //Error Handling: Ensures Colorway Has Value\n            if(colorway === \"\") {\n                colorway = this.props.sneaker.colorway;\n            }\n\n            //Updates Sneaker\n            await this.props.updateSneaker({\n                variables: {\n                    id,\n                    name,\n                    ranking,\n                    price,\n                    colorway,\n                    ownership\n                },\n                refetchQueries:[{\n                    query: RECEIVE\n                }]\n            })\n        }\n    }\n\n    //Toggles Button (Sets State and Calls Edit Function)\n    toggleButton = () => {\n        this.setState(state => ({ \n            edit: !state.edit\n        }))\n        this.updateSneaker(this.props.sneaker.id, this.state.itemName, this.state.itemRank, \n            parseFloat(this.state.itemPrice), this.state.itemColor, this.state.itemOwnership);\n    }\n    \n    //Returns Icon for Edit Button (Changes to Update When Necessary)\n    getEditIcon = () => {\n        if(this.state.edit) {\n            return <EditIcon className = \"in-button\"/>;\n        } else {\n            return <CheckIcon className = \"in-button\"/>;\n        }\n    }\n\n    //Gets Ownership Icon (Check for Owned, X for Not Owned)\n    getOwnership = () => {\n        if(this.props.sneaker.ownership) {\n            return <CheckCircleIcon />;\n        } else {\n            return <CancelIcon />;\n        }\n    }\n\n    //Gets HTML Element for Name\n    getNameElement = () => {\n        if(this.state.edit) {\n            return <h1 className = \"item-name\">{this.props.sneaker.name}</h1>;\n        } else {\n            return <input className = \"edit-name\" onChange = {this.handleName} ref = {el => this.inputName = el}></input>;\n        }\n    }\n\n    //Sets State to Updated Text from Item Name\n    handleName = (e) => {\n        const newName = e.target.value;\n        this.setState({\n            itemName: newName\n        });\n    };\n\n    //Gets HTML Element for Price\n    getPriceElement = () => {\n        if(this.state.edit) {\n            return <h1 className = \"item-price\">${this.props.sneaker.price.toFixed(2)}</h1>;\n        } else {\n            return <input className = \"edit-price\" onChange = {this.handlePrice} ref = {el => this.inputPrice = el}></input>;\n        }\n    }\n\n    //Sets State to Updated Text from Item Price\n    handlePrice = (e) => {\n        const newPrice = e.target.value;\n        this.setState({\n            itemPrice: newPrice\n        });\n    };\n\n    //Gets HTML Element for Colorway\n    getColorwayElement = () => {\n        if(this.state.edit) {\n            return this.props.sneaker.colorway;\n        } else {\n            return <input className = \"edit-color\" onChange = {this.handleColor} ref = {el => this.inputColor = el}></input>\n        }\n    }\n\n    //Sets State to Updated Text from Item Color\n    handleColor = (e) => {\n        const newColor = e.target.value;\n        this.setState({\n            itemColor: newColor\n        });\n    };\n\n    //Renders HTML for ListItem\n    render(){\n        return(\n            <div className = \"item\">\n                <div className = \"content\">\n                    <div className = \"primary-info\">\n                        <div className = \"item-rank\"><h1>{this.props.sneaker.ranking}</h1></div>\n                        <div>{this.getNameElement()}</div>\n                        <div>{this.getPriceElement()}</div>\n                        <div className = \"clear-primary\"></div>\n                    </div>\n                    <div className = \"secondary-info\">\n                        <table className = \"secondary-table\">\n                            <tr><th>Colorway</th><td>{this.getColorwayElement()}</td></tr>\n                            <tr><th>Owned</th><td>{this.getOwnership()}</td></tr>\n                            <button className = \"update-button\" onClick = {this.props.updateOwnership} >Update Ownership</button>\n                        </table>\n                        <table className = \"button-array\">\n                            <tr><td><button className = \"list-button\"><ExpandLessIcon className = \"in-button\"/></button></td>\n                                <td><button id = \"edit\" className = \"list-button\" onClick = {this.toggleButton}>{this.getEditIcon()}</button></td></tr>\n                            <tr><td><button className = \"list-button\"><ExpandMoreIcon className = \"in-button\"/></button></td>\n                                <td><button className = \"list-button\" onClick = {this.props.delete}><CloseIcon className = \"in-button\"/></button></td></tr>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default (graphql(UPDATE, {name: 'updateSneaker'}))(ListItem);","import React from 'react';\nimport './Entry.css';\n\nimport {graphql} from 'react-apollo';\n\nimport {RECEIVE, CREATE} from './../Actions.js';\n\n\n//CHANGE THIS TO INCLUDE getRank() FROM UPCOMING Sneakers CLASS\nlet currentRank = 1;\n\nclass Entry extends React.Component {\n    //State Machine of Text (from Item Name)\n    state = {\n        itemName: \"\",\n        itemRank: 0,\n        itemPrice: 0,\n        itemColor: \"\",\n        itemOwnership: false\n    };\n    \n    //Sets State to Updated Text from Item Name\n    handleName = (e) => {\n        const newName = e.target.value;\n        this.setState({\n            itemName: newName\n        });\n    };\n\n    //Sets State to Updated Price from Item Price\n    handlePrice = (e) => {\n        const newPrice = e.target.value;\n        this.setState({\n            itemPrice: newPrice\n        });\n    };\n\n    //Sets State to Updated Colorway from Item Color\n    handleColor = (e) => {\n        const newColor = e.target.value;\n        this.setState({\n            itemColor: newColor\n        });\n    };\n\n    //Creates Object\n    createSneaker = async (name, ranking, price, colorway, ownership) => {\n        //Error Handling: Ensures Name is Entered\n        if(name === \"\") {\n            alert(\"Please Enter Variables\");\n            return;\n        }\n\n        //Error Handling: Ensures Price is a Float\n        if(isNaN(price)) {\n            alert(\"Please Enter a Floating Point Number\");\n            this.inputPrice.value = '';\n            return;\n        }\n\n        //Error Handling: Fills In N/A for Black Colorway\n        if(colorway === \"\") {\n            colorway = \"N/A\";\n        }\n\n        //Creates Sneaker\n        await this.props.createSneaker({\n          variables: {\n            name,\n            ranking,\n            price,\n            colorway,\n            ownership\n          },\n          refetchQueries:[{\n            query: RECEIVE\n          }]\n        })\n        currentRank++;\n        this.inputName.value = '';\n        this.inputPrice.value = '';\n        this.inputColor.value = '';\n    }\n\n    //HTML for Entry Form at Bottom\n    render() {\n        return (\n            <div>\n                <div className = \"over-bar\"></div>\n                <div className = \"entry-box\">\n                    <div className = \"elements\">\n                        <br />\n                        <h1 className = \"create-header\">Add New Sneaker</h1>\n                        <div className = \"entry-element\">\n                            <label className = \"entry-label\">Name</label>\n                            <input className = \"entry-name\" type = \"text\" onChange = {this.handleName} ref = {el => this.inputName = el}></input>\n                            <br /><br />\n                            <label className = \"entry-label\">Price</label>\n                            <input className = \"entry-price\" type = \"text\" onChange = {this.handlePrice} ref = {el => this.inputPrice = el}></input>\n                            <br /><br />\n                            <label className = \"entry-label\">Colorway</label>\n                            <input className = \"entry-color\" type = \"text\" onChange = {this.handleColor} ref = {el => this.inputColor = el}></input>\n                            <div>\n                            <button className = \"create-button\" onClick = {() => this.createSneaker(this.state.itemName, currentRank, parseFloat(this.state.itemPrice), this.state.itemColor, false)}>Create</button>\n                            </div>\n                        </div>\n                        <br />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default (graphql(CREATE, {name: 'createSneaker'}))(Entry);","import React from 'react';\n\nimport {graphql} from 'react-apollo';\nimport {RECEIVE, UPDATE_OWNERSHIP, DELETE} from './Actions.js';\n\nimport Header from './Header/Header.js';\nimport ListItem from './List/ListItem.js';\nimport Entry from './Entry/Entry.js';\n\nimport {flowRight as compose} from 'lodash';\n\n//Main App\nclass App extends React.Component {\n  //Updates Ownership (swaps ownership boolean and updates)\n  updateOwnership = async (sneaker) => {\n    await this.props.updateOwnership({\n      variables: {\n        id: sneaker.id,\n        ownership: !sneaker.ownership\n      },\n      refetchQueries:[{\n        query: RECEIVE\n      }]\n    });\n  };\n\n  //Deletes Sneaker (deletes from database and updates)\n  deleteSneaker = async (sneaker) => {\n    await this.props.deleteSneaker({\n      variables: {\n        id: sneaker.id\n      },\n      refetchQueries:[{\n        query: RECEIVE\n      }]\n    });\n  };\n\n  //Renders App\n  render() {\n    console.log(this.props);\n    const {data: {loading, getList}} = this.props;\n\n    if (loading) {\n      return null;\n    }\n\n    return (\n      <div>\n        <Header />\n        <div style = {{display: \"flex\"}}>\n          <div style = {{margin: \"auto\", width: \"80%\"}}>\n            {getList.map(sneaker => (\n                <ListItem key = {`${sneaker.id}-item`} sneaker = {sneaker} \n                updateOwnership = {() => this.updateOwnership(sneaker)} \n                delete = {() => this.deleteSneaker(sneaker)} />\n            ))}\n          </div>\n        </div>\n        <Entry />\n      </div>\n    );\n  }\n}\n\n//Exports Packages\nexport default compose(\n  graphql(RECEIVE),\n  graphql(UPDATE_OWNERSHIP, {name: 'updateOwnership'}),\n  graphql(DELETE, {name: 'deleteSneaker'})\n)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from \"apollo-boost\";\nimport {ApolloProvider} from \"react-apollo\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//New Client For Server (CURRENTLY LOCAL)\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\"\n})\n\nReactDOM.render(\n  <React.StrictMode> \n    <ApolloProvider client  = {client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}