{"version":3,"sources":["Header/AgletLogoOutline.png","Entry/Actions.js","Header/Header.js","List/ListItem.js","Entry/Entry.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CREATE","gql","RECEIVE","UPDATE","DELETE","Header","className","src","AgletLogo","alt","ListItem","props","rank","name","price","toFixed","color","ownership","getOwnership","onClick","update","delete","currentRank","Entry","state","itemName","itemRank","itemPrice","itemColor","itemOwnership","handleName","e","newName","target","value","setState","handlePrice","newPrice","handleColor","newColor","createSneaker","ranking","colorway","a","isNaN","alert","inputPrice","variables","refetchQueries","query","inputName","inputColor","type","onChange","this","ref","el","parseFloat","React","Component","graphql","App","updateSneaker","sneaker","id","deleteSneaker","console","log","data","loading","getList","style","display","margin","width","map","key","compose","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.068478d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AgletLogoOutline.d1e90b88.png\";","//Mutations for Aglet\nimport gql from 'graphql-tag';\n\n//Creates Object\nexport const CREATE = gql`\n  mutation($name: String!, $ranking: Int!, $price: Float!, $colorway: String!, $ownership: Boolean!) {\n    createSneaker(name: $name, ranking: $ranking, price: $price, colorway: $colorway, ownership: $ownership){\n      name\n      ranking\n      price\n      colorway\n      ownership\n    }\n  }\n`;\n\n//Receives Objects\nexport const RECEIVE = gql`\n  query {\n    getList{\n      id\n      name\n      ranking\n      price\n      colorway\n      ownership\n    }\n  }\n`;\n\n//Updates Object\nexport const UPDATE = gql`\n  mutation($id: ID!, $name: String, $ranking: Int, $price: Float, $colorway: String, $ownership: Boolean) {\n    updateSneaker(id: $id, name: $name, ranking: $ranking, price: $price, colorway: $colorway, ownership: $ownership)\n  }\n`;\n\n//Deletes Object\nexport const DELETE = gql`\n  mutation($id: ID!) {\n    deleteSneaker(id:$id)\n  }\n`;","import React from 'react';\nimport './Header.css';\nimport AgletLogo from './AgletLogoOutline.png';\n\n//HTML for Header Segment\nfunction Header() {\n    return(\n        <div className = \"header-bar\">\n            <img src = {AgletLogo} alt = \"Aglet Logo\" className = \"header-image\"></img>\n            <h2 className = \"header-title\">Your Sneaker Wishlist</h2>\n            <div className = \"under-bar\"></div>\n        </div>\n    );\n}\n\nexport default (Header);","import React from 'react';\nimport './ListItem.css';\n\nfunction getOwnership(props) {\n    if(props.ownership) {\n        return \"Owned\";\n    } else {\n        return \"Not Owned\";\n    }\n}\n\n//HTML for a List Item (Sneaker Listing Object)\nfunction ListItem(props) {\n    return(\n        <div className = \"item\">\n            <div className = \"content\">\n                <div className = \"primary-info\">\n                    <div className = \"item-rank\"><h1>{props.rank}</h1></div>\n                    <h1 className = \"item-name\">{props.name}</h1>\n                    <h1 className = \"item-price\">${props.price.toFixed(2)}</h1>\n                    <div className = \"clear-primary\"></div>\n                </div>\n                <div className = \"secondary-info\">\n                    <h3 className = \"item-color\">Colorway: {props.color}</h3>\n                    <h3 className = \"item-ownership\">Ownership: {getOwnership(props)}</h3>\n                </div>\n                <button onClick = {props.update} >Update</button>\n                <button onClick = {props.delete} >Delete</button>\n            </div>\n        </div>\n    );\n}\n\nexport default (ListItem);","import React from 'react';\nimport './Entry.css';\n\nimport {graphql} from 'react-apollo';\n\nimport {RECEIVE, CREATE} from './Actions.js';\n\nlet currentRank = 1;\n\n\n\nclass Entry extends React.Component {\n    //State Machine of Text (from Item Name)\n    state = {\n        itemName: \"\",\n        itemRank: 0,\n        itemPrice: 0,\n        itemColor: \"\",\n        itemOwnership: false\n    };\n    \n    //Sets State to Updated Text from Item Name\n    handleName = (e) => {\n        const newName = e.target.value;\n        this.setState({\n            itemName: newName\n        });\n    };\n\n    //Sets State to Updated Price from Item Price\n    handlePrice = (e) => {\n        const newPrice = e.target.value;\n        this.setState({\n            itemPrice: newPrice\n        });\n    };\n\n    //Sets State to Updated Colorway from Item Color\n    handleColor = (e) => {\n        const newColor = e.target.value;\n        this.setState({\n            itemColor: newColor\n        });\n    };\n\n    //Creates Object\n    createSneaker = async (name, ranking, price, colorway, ownership) => {\n        //Error Handling\n        if(isNaN(price)) {\n            alert(\"Please Enter a Floating Point Number\");\n            this.inputPrice.value = '';\n            return;\n        }\n        //Creates Todo\n        await this.props.createSneaker({\n          variables: {\n            name,\n            ranking,\n            price,\n            colorway,\n            ownership\n          },\n          refetchQueries:[{\n            query: RECEIVE\n          }]\n        })\n        currentRank++;\n        this.inputName.value = '';\n        this.inputPrice.value = '';\n        this.inputColor.value = '';\n    }\n\n    //HTML for Entry Form at Bottom\n    render() {\n        return (\n            <div>\n                <div className = \"over-bar\"></div>\n                <div className = \"entry-box\">\n                    <div className = \"elements\">\n                        <h1 className = \"create-header\">Create</h1>\n                        <div className = \"entry-element\">\n                            <label>Sneaker Name</label>\n                            <input className = \"item-name\" type = \"text\" onChange = {this.handleName} ref = {el => this.inputName = el}></input>\n                        </div>\n                        <div className = \"entry-element\">\n                            <label>Price</label>\n                            <input className = \"item-price\" type = \"text\" onChange = {this.handlePrice} ref = {el => this.inputPrice = el}></input>\n                        </div>\n                        <div className = \"entry-element\">\n                            <label>Colorway</label>\n                            <input className = \"item-color\" type = \"text\" onChange = {this.handleColor} ref = {el => this.inputColor = el}></input>\n                        </div>\n                        <div className = \"create-button\">\n                            <button onClick = {() => this.createSneaker(this.state.itemName, currentRank, parseFloat(this.state.itemPrice), this.state.itemColor, false)}>Create</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default (graphql(CREATE, {name: 'createSneaker'}))(Entry);","import React from 'react';\n\nimport {graphql} from 'react-apollo';\nimport {RECEIVE, UPDATE, DELETE} from './Entry/Actions.js';\n\nimport Header from './Header/Header.js';\nimport ListItem from './List/ListItem.js';\nimport Entry from './Entry/Entry.js';\n\nimport {flowRight as compose} from 'lodash';\n\n//Main App\nclass App extends React.Component {\n  //Updates Sneaker (swaps complete Boolean value and updates)\n  updateSneaker = async (sneaker) => {\n    await this.props.updateSneaker({\n      variables: {\n        id: sneaker.id,\n        name: sneaker.name,\n        ranking: sneaker.ranking,\n        price: sneaker.price,\n        colorway: sneaker.colorway,\n        ownership: sneaker.ownership\n      },\n      refetchQueries:[{\n        query: RECEIVE\n      }]\n    });\n  };\n\n  //Deletes Sneaker (deletes from database and updates)\n  deleteSneaker = async (sneaker) => {\n    await this.props.deleteSneaker({\n      variables: {\n        id: sneaker.id\n      },\n      refetchQueries:[{\n        query: RECEIVE\n      }]\n    });\n  };\n\n  //Renders App\n  render() {\n    console.log(this.props);\n    const {data: {loading, getList}} = this.props;\n    if (loading) {\n      return null;\n    }\n    return (\n      <div>\n        <Header />\n        <div style = {{display: \"flex\"}}>\n          <div style = {{margin: \"auto\", width: \"80%\"}}>\n            {getList.map(sneaker => (\n                <ListItem key = {`${sneaker.id}-item`} rank = {sneaker.ranking} name = {sneaker.name} price = {sneaker.price} color = {sneaker.colorway} ownership = {sneaker.ownership} update = {() => this.updateSneaker(sneaker)} delete = {() => this.deleteSneaker(sneaker)} />\n            ))}\n          </div>\n        </div>\n        <Entry />\n      </div>\n    );\n  }\n}\n\n//Exports Packages\nexport default compose(\n  graphql(RECEIVE),\n  graphql(UPDATE, {name: 'updateSneaker'}),\n  graphql(DELETE, {name: 'deleteSneaker'})\n)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from \"apollo-boost\";\nimport {ApolloProvider} from \"react-apollo\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//New Client For Server (CURRENTLY LOCAL)\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\"\n})\n\nReactDOM.render(\n  <React.StrictMode> \n    <ApolloProvider client  = {client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}