{"version":3,"sources":["Header/AgletLogoOutline.png","Entry/Actions.js","Header/Header.js","List/ListItem.js","Entry/Entry.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CREATE","gql","RECEIVE","UPDATE","DELETE","Header","className","src","AgletLogo","alt","ListItem","props","name","complete","toString","onClick","update","delete","Entry","state","itemtext","handleChange","e","newText","target","value","setState","createTodo","text","a","variables","refetchQueries","query","inputName","type","onChange","this","ref","el","React","Component","graphql","App","updateTodo","todo","id","deleteTodo","data","loading","todos","style","display","margin","width","map","key","compose","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0a126e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AgletLogoOutline.d1e90b88.png\";","//Mutations for Aglet\nimport gql from 'graphql-tag';\n\n//Creates Object\nexport const CREATE = gql`\n  mutation($text: String!) {\n    createTodo(text: $text) {\n      text\n      id\n      complete\n    }\n  }\n`;\n\n//Receives Objects\nexport const RECEIVE = gql`\n{\n  todos {\n    id\n    text \n    complete\n  }\n}\n`;\n\n//Updates Object\nexport const UPDATE = gql`\n  mutation($id: ID!, $complete: Boolean!) {\n    updateTodo(id: $id, complete: $complete)\n  }\n`;\n\n//Deletes Object\nexport const DELETE = gql`\n  mutation($id: ID!) {\n    removeTodo(id:$id)\n  }\n`;","import React from 'react';\nimport './Header.css';\nimport AgletLogo from './AgletLogoOutline.png';\n\n//HTML for Header Segment\nfunction Header() {\n    return(\n        <div className = \"header-bar\">\n            <img src = {AgletLogo} alt = \"Aglet Logo\" className = \"header-image\"></img>\n            <h2>Your Sneaker Wishlist</h2>\n            <div className = \"under-bar\"></div>\n        </div>\n    );\n}\n\nexport default (Header);","import React from 'react';\nimport './ListItem.css';\n\n//HTML for a List Item (Sneaker Listing Object)\nfunction ListItem(props) {\n    return(\n        <div className = \"item\">\n            <h1>{props.name}</h1>\n            <p>{props.complete.toString()}</p>\n            <button onClick = {props.update} >Update</button>\n            <button onClick = {props.delete} >Delete</button>\n        </div>\n    );\n}\n\nexport default (ListItem);","import React from 'react';\nimport './Entry.css';\n\nimport {graphql} from 'react-apollo';\n\nimport {RECEIVE, CREATE} from './Actions.js';\n\n\nclass Entry extends React.Component {\n    //State Machine of Text (from Item Name)\n    state = {\n        itemtext: \"\"\n    };\n    \n    //Sets State to Updated Text from Item Name\n    handleChange = (e) => {\n        const newText = e.target.value;\n        this.setState({\n            itemtext: newText\n        });\n    };\n\n    //Creates Object\n    createTodo = async text => {\n        await this.props.createTodo({\n          variables: {\n            text\n          },\n          refetchQueries:[{\n            query: RECEIVE\n          }]\n        })\n        this.inputName.value = '';\n    }\n\n    //HTML for Entry Form at Bottom\n    render() {\n        return (\n            <div>\n                <div className = \"over-bar\"></div>\n                <div className = \"entry-box\">\n                    <div className = \"elements\">\n                        <h1 className = \"create-header\">Create</h1>\n                        <label>Item Name</label>\n                        <input className = \"item-name\" type = \"text\" onChange = {this.handleChange} ref = {el => this.inputName = el}></input>\n                        <div className = \"create-button\">\n                            <button onClick = {() => this.createTodo(this.state.itemtext)}>Create</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default (graphql(CREATE, {name: 'createTodo'}))(Entry);","import React from 'react';\n\nimport {graphql} from 'react-apollo';\nimport {RECEIVE, UPDATE, DELETE} from './Entry/Actions.js';\n\nimport Header from './Header/Header.js';\nimport ListItem from './List/ListItem.js';\nimport Entry from './Entry/Entry.js';\n\nimport {flowRight as compose} from 'lodash';\n\n//Main App\nclass App extends React.Component {\n  //Updates Todo (swaps complete Boolean value and updates)\n  updateTodo = async (todo) => {\n    await this.props.updateTodo({\n      variables: {\n        id: todo.id,\n        complete: !todo.complete\n      },\n      refetchQueries:[{\n        query: RECEIVE\n      }]\n    });\n  };\n\n  //Deletes Todo (deletes from database and updates)\n  deleteTodo = async todo => {\n    await this.props.deleteTodo({\n      variables: {\n        id: todo.id\n      },\n      refetchQueries:[{\n        query: RECEIVE\n      }]\n    });\n  };\n\n  //Renders App\n  render() {\n    const {data: {loading, todos}} = this.props;\n    if (loading) {\n      return null;\n    }\n    return (\n      <div>\n        <Header />\n        <div style = {{display: \"flex\"}}>\n          <div style = {{margin: \"auto\", width: \"80%\"}}>\n              {todos.map(todo => (\n                <ListItem key = {`${todo.id}-todo-item`} name = {todo.text} complete = {todo.complete} update = {() => this.updateTodo(todo)} delete = {() => this.deleteTodo(todo)} />\n              ))}\n          </div>\n        </div>\n        <Entry />\n      </div>\n    );\n  }\n}\n\n//Exports Packages\nexport default compose(\n  graphql(RECEIVE),\n  graphql(UPDATE, {name: 'updateTodo'}),\n  graphql(DELETE, {name: 'deleteTodo'})\n)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from \"apollo-boost\";\nimport {ApolloProvider} from \"react-apollo\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//New Client For Server (CURRENTLY LOCAL)\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\"\n})\n\nReactDOM.render(\n  <React.StrictMode> \n    <ApolloProvider client  = {client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}