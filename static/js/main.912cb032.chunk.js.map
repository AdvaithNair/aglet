{"version":3,"sources":["Images/AgletLogoOutline.png","Actions.js","Header/Header.js","Sorting.js","List/ListItem.js","Entry/Entry.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CREATE","gql","RECEIVE","UPDATE","UPDATE_OWNERSHIP","UPDATE_RANKING","DELETE","Header","className","src","AgletLogo","alt","sortByRank","list","length","middle","Math","floor","left","slice","right","ranking","push","shift","concat","merge","sortByName","len","i","min","j","name","toLowerCase","temp","console","log","sortByPrice","max","log10","maxPrice","price","getMaxPrice","digits","index","currentDigit","getDigit","k","l","reverse","num","typeDigit","lastDigit","sortByColorway","quickSort","pivot","colorway","tempLeft","tempRight","swap","partition","indexLeft","indexRight","sortByOwnership","toSwap","n","ownership","ListItem","state","edit","itemName","props","sneaker","itemRank","itemPrice","itemColor","itemOwnership","updateSneaker","id","a","isNaN","alert","variables","refetchQueries","query","updateRanking","toggleButton","setState","parseFloat","getEditIcon","getOwnership","getNameElement","onChange","handleName","ref","el","inputName","e","newName","target","value","getPriceElement","toFixed","handlePrice","inputPrice","newPrice","getColorwayElement","handleColor","inputColor","newColor","swapUp","currentRank","newList","wholeList","swapDown","this","onClick","updateOwnership","delete","React","Component","compose","graphql","Entry","createSneaker","type","App","sortType","getOrder","deleteSneaker","getSortRank","getSortName","getSortPrice","getSortColor","getSortOwnership","isFetching","data","loading","getList","style","display","margin","width","defaultIndex","onSelect","updateSortType","map","key","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.912cb032.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AgletLogoOutline.d1e90b88.png\";","//Mutations for Aglet\nimport gql from 'graphql-tag';\n\n//Creates Object\nexport const CREATE = gql`\n  mutation($name: String!, $ranking: Int!, $price: Float!, $colorway: String!, $ownership: Boolean!) {\n    createSneaker(name: $name, ranking: $ranking, price: $price, colorway: $colorway, ownership: $ownership){\n      name\n      ranking\n      price\n      colorway\n      ownership\n    }\n  }\n`;\n\n//Receives Objects\nexport const RECEIVE = gql`\n  query {\n    getList{\n      id\n      name\n      ranking\n      price\n      colorway\n      ownership\n    }\n  }\n`;\n\n//Updates Object\nexport const UPDATE = gql`\n  mutation($id: ID!, $name: String, $ranking: Int, $price: Float, $colorway: String, $ownership: Boolean) {\n    updateSneaker(id: $id, name: $name, ranking: $ranking, price: $price, colorway: $colorway, ownership: $ownership)\n  }\n`;\n\n//Updates Ownership of Object\nexport const UPDATE_OWNERSHIP = gql`\n  mutation($id: ID!, $ownership: Boolean!) {\n    updateOwnership(id: $id, ownership: $ownership)\n  }\n`;\n\n//Updates Ranking of Object\nexport const UPDATE_RANKING = gql`\n  mutation($id: ID!, $ranking: Int!) {\n    updateRanking(id: $id, ranking: $ranking)\n  }\n`;\n\n//Deletes Object\nexport const DELETE = gql`\n  mutation($id: ID!) {\n    deleteSneaker(id:$id)\n  }\n`;","import React from 'react';\nimport './Header.css';\nimport AgletLogo from './../Images/AgletLogoOutline.png';\n\n//HTML for Header Segment\nfunction Header() {\n    return(\n        <div className = \"header-bar\">\n            <img src = {AgletLogo} alt = \"Aglet Logo\" className = \"header-image\"></img>\n            <h2 className = \"header-title\">Your Sneaker Collection</h2>\n            <div className = \"under-bar\"></div>\n        </div>\n    );\n}\n\nexport default (Header);","//Sort By Rank\n//MergeSort - O(N LOG N)\nexport function sortByRank(list) {\n    if (list.length < 2) {\n      return list;\n    }\n  \n    const middle = Math.floor(list.length / 2);\n    const left = list.slice(0, middle);\n    const right = list.slice(middle);\n  \n    return merge(sortByRank(left), sortByRank(right));\n}\n\nfunction merge(left, right) {\n    let list = [];\n  \n    while (left.length && right.length) {\n      if (left[0].ranking < right[0].ranking) {\n        list.push(left.shift());\n      } else {\n        list.push(right.shift());\n      }\n    }\n    return list.concat(left.slice().concat(right.slice()));\n} \n\nexport function getName(arr) {\n    for(let i = 0; i < arr.length; i++) {\n        console.log(arr[i].name);\n    }\n}\n\n//Sort By Name\n//Selection Sort - O(N^2)\nexport function sortByName(list) {\n    let len = list.length;\n    for (let i = 0; i < len; i++) {\n        let min = i;\n        for (let j = i + 1; j < len; j++) {\n            if (list[min].name.toLowerCase() > list[j].name.toLowerCase()) {\n                min = j;\n            }\n        }\n        if (min !== i) {\n            let temp = list[i];\n            list[i] = list[min];\n            list[min] = temp;\n        }\n    }\n    console.log(list);\n    return list;\n}\n\n//Sort By Price\n//Radix Sort - O(N)\nexport function sortByPrice(list){\n    let max = Math.floor(Math.log10(getMaxPrice(list)));  \n    let digits = [];\n    let index = 0;\n  \n    for(let i = 0; i < max + 1; i++){\n      digits = [];\n      for(let j = 0; j < list.length; j++){\n        let currentDigit = getDigit(list[j].price, i + 1);\n  \n        digits[currentDigit] = digits[currentDigit] || [];\n        digits[currentDigit].push(list[j]);\n      }\n  \n      index = 0;\n\n      for(let k = 0; k < digits.length; k++){\n        if(digits[k] && digits[k].length > 0){\n          for(let l = 0; l < digits[k].length; l++){\n            list[index++] = digits[k][l];\n          }\n        }\n      }\n    }\n\n    return list.reverse();\n}\n\nfunction getDigit(num, typeDigit){\n    let lastDigit = 0;\n    while(typeDigit--) {\n        lastDigit = num % 10;\n      num = Math.floor((num - lastDigit) / 10);\n    }\n    return lastDigit;\n}\n\nfunction getMaxPrice(list) {\n    let maxPrice = list[0].price;\n\n    for(let i = 1; i < list.length; i++) {\n        if (list[i].price > maxPrice) {\n            maxPrice = list[i].price;\n        }\n    }\n    return maxPrice;\n}\n\n//Sort By Colorway\n//QuickSort - O(N LOG N)\nexport function sortByColorway(list) {\n    return quickSort(list, 0, list.length - 1);\n}\n\nfunction quickSort(list, left, right) {\n    let index;\n    if(list.length > 1) {\n        index = partition(list, left, right);\n        if(left < index - 1) { \n            quickSort(list, left, index - 1);\n        } if(index < right) { \n            quickSort(list, index, right);\n        }\n    }\n    return list;\n}\n\nfunction partition(list, left, right) {\n    let pivot = list[Math.floor((right + left) / 2)].colorway.toLowerCase();\n    let tempLeft = left;\n    let tempRight = right;\n\n    while (tempLeft <= tempRight) {\n        while (list[tempLeft].colorway.toLowerCase() < pivot) {\n            tempLeft++;\n        }\n        while (list[tempRight].colorway.toLowerCase() > pivot) {\n            tempRight--;\n        }\n        if (tempLeft <= tempRight) {\n            swap(list, tempLeft, tempRight);\n            tempLeft++;\n            tempRight--;\n        }\n    }\n    return tempLeft;\n}\n\nfunction swap(list, indexLeft, indexRight){\n    let temp = list[indexLeft];\n    list[indexLeft] = list[indexRight];\n    list[indexRight] = temp;\n}\n\n//Sort By Ownership\n//Bubble Sort - O(N ^ 2)\n//I used this to make sure the sort is stable, so it will inherrently rank by ranking too\nexport function sortByOwnership(list){\n    let toSwap;\n    let n = list.length-1;\n\n    list = sortByRank(list);\n\n    do {\n        toSwap = false;\n        for (let i = 0; i < n; i++){\n            if (list[i].ownership < list[i + 1].ownership) {\n               let temp = list[i];\n               list[i] = list[i + 1];\n               list[i + 1] = temp;\n               toSwap = true;\n            }\n        }\n        n--;\n    } while (toSwap);\n\n    return list; \n}","import React from 'react';\nimport './ListItem.css';\n\nimport {RECEIVE, UPDATE, UPDATE_RANKING} from './../Actions.js';\nimport {flowRight as compose} from 'lodash';\nimport {graphql} from 'react-apollo';\n\nimport {sortByRank} from './../Sorting.js';\n\n//Material Icons\nimport CloseIcon from '@material-ui/icons/Close';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';import CancelIcon from '@material-ui/icons/Cancel'; \n\n//HTML for a List Item (Sneaker Listing Object)\nclass ListItem extends React.Component {\n    //State Machine\n    state = {\n        edit: true,\n        itemName: this.props.sneaker.name,\n        itemRank: this.props.sneaker.ranking,\n        itemPrice: this.props.sneaker.price,\n        itemColor: this.props.sneaker.colorway,\n        itemOwnership: this.props.sneaker.ownership\n    }\n\n    //Updates Edit Values\n    updateSneaker = async (id, name, ranking, price, colorway, ownership) => {\n        if(!this.state.edit) {\n            //Error Handling: Ensures Name Has Value\n            if(name === \"\") {\n                name = this.props.sneaker.name;\n            }\n\n            //Error Handling: Ensures Price is a Float\n            if(isNaN(price)) {\n                alert(\"Please Update With a Floating Point Number\");\n                return;\n            }\n\n            //Error Handling: Ensures Colorway Has Value\n            if(colorway === \"\") {\n                colorway = this.props.sneaker.colorway;\n            }\n\n            //Updates Sneaker\n            await this.props.updateSneaker({\n                variables: {\n                    id,\n                    name,\n                    ranking,\n                    price,\n                    colorway,\n                    ownership\n                },\n                refetchQueries:[{\n                    query: RECEIVE\n                }]\n            })\n        }\n    }\n\n    //Updates Ranking\n    updateRanking = async (id, ranking) => {\n        await this.props.updateRanking({\n        variables: {\n            id,\n            ranking\n        },\n        refetchQueries:[{\n            query: RECEIVE\n        }]\n        });\n    };\n\n    //Toggles Button (Sets State and Calls Edit Function)\n    toggleButton = () => {\n        this.setState(state => ({ \n            edit: !state.edit\n        }))\n        this.updateSneaker(this.props.sneaker.id, this.state.itemName, this.state.itemRank, \n            parseFloat(this.state.itemPrice), this.state.itemColor, this.state.itemOwnership);\n    }\n    \n    //Returns Icon for Edit Button (Changes to Update When Necessary)\n    getEditIcon = () => {\n        if(this.state.edit) {\n            return <EditIcon className = \"in-button\"/>;\n        } else {\n            return <CheckIcon className = \"in-button\"/>;\n        }\n    }\n\n    //Gets Ownership Icon (Check for Owned, X for Not Owned)\n    getOwnership = () => {\n        if(this.props.sneaker.ownership) {\n            return <CheckCircleIcon />;\n        } else {\n            return <CancelIcon />;\n        }\n    }\n\n    //Gets HTML Element for Name\n    getNameElement = () => {\n        if(this.state.edit) {\n            return <h1 className = \"item-name\">{this.props.sneaker.name}</h1>;\n        } else {\n            return <input className = \"edit-name\" onChange = {this.handleName} ref = {el => this.inputName = el}></input>;\n        }\n    }\n\n    //Sets State to Updated Text from Item Name\n    handleName = (e) => {\n        const newName = e.target.value;\n        this.setState({\n            itemName: newName\n        });\n    };\n\n    //Gets HTML Element for Price\n    getPriceElement = () => {\n        if(this.state.edit) {\n            return <h1 className = \"item-price\">${this.props.sneaker.price.toFixed(2)}</h1>;\n        } else {\n            return <input className = \"edit-price\" onChange = {this.handlePrice} ref = {el => this.inputPrice = el}></input>;\n        }\n    }\n\n    //Sets State to Updated Text from Item Price\n    handlePrice = (e) => {\n        const newPrice = e.target.value;\n        this.setState({\n            itemPrice: newPrice\n        });\n    };\n\n    //Gets HTML Element for Colorway\n    getColorwayElement = () => {\n        if(this.state.edit) {\n            return this.props.sneaker.colorway;\n        } else {\n            return <input className = \"edit-color\" onChange = {this.handleColor} ref = {el => this.inputColor = el}></input>\n        }\n    }\n\n    //Sets State to Updated Text from Item Color\n    handleColor = (e) => {\n        const newColor = e.target.value;\n        this.setState({\n            itemColor: newColor\n        });\n    };\n\n    swapUp = () => {\n        let currentRank = this.props.sneaker.ranking;\n        let newList = sortByRank(this.props.wholeList);\n        //Update Ranking Mutation\n        if(currentRank > 1) {\n            //Update Current Element\n            this.updateRanking(newList[currentRank - 1].id, (currentRank - 1));\n            //Update Element Before\n            this.updateRanking(newList[currentRank - 2].id, currentRank);\n        }\n    }\n\n    swapDown = () => {\n        let currentRank = this.props.sneaker.ranking;\n        let newList = sortByRank(this.props.wholeList);\n        //Update Ranking Mutation\n        if(currentRank < (this.props.wholeList.length)) {\n            //Update Current Element\n            this.updateRanking(newList[currentRank - 1].id, (currentRank + 1));\n            //Update Element After\n            this.updateRanking(newList[currentRank].id, currentRank);\n        }\n    }\n\n    //Renders HTML for ListItem\n    render(){\n        return(\n            <div className = \"item\">\n                <div className = \"content\">\n                    <div className = \"primary-info\">\n                        <div className = \"item-rank\"><h1>{this.props.sneaker.ranking}</h1></div>\n                        <div>{this.getNameElement()}</div>\n                        <div>{this.getPriceElement()}</div>\n                        <div className = \"clear-primary\"></div>\n                    </div>\n                    <div className = \"secondary-info\">\n                        <table className = \"secondary-table\">\n                            <tbody><tr><th>Colorway</th><td>{this.getColorwayElement()}</td></tr>\n                                <tr><th>Owned</th><td>{this.getOwnership()}</td></tr>\n                                <tr><button className = \"update-button\" onClick = {this.props.updateOwnership} >Update Ownership</button></tr></tbody>\n                        </table>\n                        <table className = \"button-array\">\n                            <tbody><tr><td><button className = \"list-button\" onClick = {this.swapUp}><ExpandLessIcon className = \"in-button\"/></button></td>\n                                <td><button id = \"edit\" className = \"list-button\" onClick = {this.toggleButton}>{this.getEditIcon()}</button></td></tr>\n                            <tr><td><button className = \"list-button\" onClick = {this.swapDown}><ExpandMoreIcon className = \"in-button\"/></button></td>\n                                <td><button className = \"list-button\" onClick = {this.props.delete}><CloseIcon className = \"in-button\"/></button></td></tr></tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default compose(\n    graphql(UPDATE, {name: 'updateSneaker'}),\n    graphql(UPDATE_RANKING, {name: 'updateRanking'})\n)(ListItem);","import React from 'react';\nimport './Entry.css';\n\nimport {graphql} from 'react-apollo';\n\nimport {RECEIVE, CREATE} from './../Actions.js';\n\nclass Entry extends React.Component {\n    //State Machine of Text (from Item Name)\n    state = {\n        itemName: \"\",\n        itemRank: 0,\n        itemPrice: 0,\n        itemColor: \"\",\n        itemOwnership: false\n    };\n    \n    //Sets State to Updated Text from Item Name\n    handleName = (e) => {\n        const newName = e.target.value;\n        this.setState({\n            itemName: newName\n        });\n    };\n\n    //Sets State to Updated Price from Item Price\n    handlePrice = (e) => {\n        const newPrice = e.target.value;\n        this.setState({\n            itemPrice: newPrice\n        });\n    };\n\n    //Sets State to Updated Colorway from Item Color\n    handleColor = (e) => {\n        const newColor = e.target.value;\n        this.setState({\n            itemColor: newColor\n        });\n    };\n\n    //Creates Object\n    createSneaker = async (name, ranking, price, colorway, ownership) => {\n        //Error Handling: Ensures Name is Entered\n        if(name === \"\") {\n            alert(\"Please Enter Variables\");\n            return;\n        }\n\n        //Error Handling: Ensures Price is a Float\n        if(isNaN(price)) {\n            alert(\"Please Enter a Floating Point Number\");\n            this.inputPrice.value = '';\n            return;\n        }\n\n        //Error Handling: Fills In N/A for Black Colorway\n        if(colorway === \"\") {\n            colorway = \"N/A\";\n        }\n\n        //Creates Sneaker\n        await this.props.createSneaker({\n          variables: {\n            name,\n            ranking,\n            price,\n            colorway,\n            ownership\n          },\n          refetchQueries:[{\n            query: RECEIVE\n          }]\n        })\n        this.inputName.value = '';\n        this.inputPrice.value = '';\n        this.inputColor.value = '';\n    }\n\n    //HTML for Entry Form at Bottom\n    render() {\n        return (\n            <div>\n                <div className = \"over-bar\"></div>\n                <div className = \"entry-box\">\n                    <div className = \"elements\">\n                        <br />\n                        <h1 className = \"create-header\">Add New Sneaker</h1>\n                        <div className = \"entry-element\">\n                            <br />\n                            <label className = \"entry-label\">Name</label>\n                            <input className = \"entry-name\" type = \"text\" onChange = {this.handleName} ref = {el => this.inputName = el}></input>\n                            <br /><br />\n                            <label className = \"entry-label\">Price</label>\n                            <input className = \"entry-price\" type = \"text\" onChange = {this.handlePrice} ref = {el => this.inputPrice = el}></input>\n                            <br /><br />\n                            <label className = \"entry-label\">Colorway</label>\n                            <input className = \"entry-color\" type = \"text\" onChange = {this.handleColor} ref = {el => this.inputColor = el}></input>\n                            <div><button className = \"create-button\" onClick = {() => this.createSneaker(this.state.itemName, this.props.currentRank, parseFloat(this.state.itemPrice), this.state.itemColor, false)}>Create</button></div>\n                        </div>\n                        <br />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default (graphql(CREATE, {name: 'createSneaker'}))(Entry);","import React from 'react';\nimport './App.css';\n\nimport {graphql} from 'react-apollo';\nimport {RECEIVE, UPDATE_OWNERSHIP, DELETE} from './Actions.js';\nimport {flowRight as compose} from 'lodash';\n\nimport Header from './Header/Header.js';\nimport ListItem from './List/ListItem.js';\nimport Entry from './Entry/Entry.js';\n\nimport {sortByName, sortByRank, sortByPrice, sortByColorway, sortByOwnership} from './Sorting.js';\n\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\n\n//Material Icons\nimport SortByAlphaIcon from '@material-ui/icons/SortByAlpha';\nimport SortIcon from '@material-ui/icons/Sort';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\nimport ThumbsUpDownIcon from '@material-ui/icons/ThumbsUpDown';\n\n//Main App\nclass App extends React.Component {\n  //State Machine of Sorting\n  //SortType 0 = Name, 1 = Rank, 2 = Price, 3 = Color, 4 = Ownership\n  state = {\n    sortType: 0\n  };\n\n  //Gets Order of Sorting\n  getOrder = (list) => {\n    let type = this.state.sortType;\n    if(type === 0) {\n      return sortByRank(list);\n    } if(type === 1) {\n      return sortByName(list);\n    } if (type === 2) {\n      return sortByPrice(list);\n    } if (type === 3) {\n      return sortByColorway(list);\n    } if (type === 4) {\n      return sortByOwnership(list);\n    }\n  }\n\n  //Updates Ownership (swaps ownership boolean and updates)\n  updateOwnership = async (sneaker) => {\n    await this.props.updateOwnership({\n      variables: {\n        id: sneaker.id,\n        ownership: !sneaker.ownership\n      },\n      refetchQueries:[{\n        query: RECEIVE\n      }]\n    });\n  };\n\n  //Deletes Sneaker (deletes from database and updates)\n  deleteSneaker = async (sneaker) => {\n    await this.props.deleteSneaker({\n      variables: {\n        id: sneaker.id\n      },\n      refetchQueries:[{\n        query: RECEIVE\n      }]\n    });\n  };\n\n  //Updates State for Sort Type\n  updateSortType(type) {\n    this.setState({sortType: type});\n  }\n\n  //Gets HTML Element for Ranking Sorting Block\n  getSortRank = () => {\n    if(this.state.sortType === 0) {\n        return <div className = \"sort-select\"><SortIcon className = \"in-div\" /></div>;\n    } else {\n        return <div className = \"sort-not-selected\"><SortIcon className = \"in-div\" /></div>;\n    }\n  }\n\n  //Gets HTML Element for Name Sorting Block\n  getSortName = () => {\n      if(this.state.sortType === 1) {\n          return <div className = \"sort-select\"><SortByAlphaIcon className = \"in-div\" /></div>;\n      } else {\n          return <div className = \"sort-not-selected\"><SortByAlphaIcon className = \"in-div\" /></div>;\n      }\n  }\n\n  //Gets HTML Element for Price Sorting Block\n  getSortPrice = () => {\n      if(this.state.sortType === 2) {\n          return <div className = \"sort-select\"><AttachMoneyIcon className = \"in-div\" /></div>;\n      } else {\n          return <div className = \"sort-not-selected\"><AttachMoneyIcon className = \"in-div\" /></div>;\n      }\n  }\n\n  //Gets HTML Element for Colorway Sorting Block\n  getSortColor = () => {\n      if(this.state.sortType === 3) {\n          return <div className = \"sort-select\"><ColorLensIcon className = \"in-div\" /></div>;\n      } else {\n          return <div className = \"sort-not-selected\"><ColorLensIcon className = \"in-div\" /></div>;\n      }\n  }\n\n  //Gets HTML Element for Ownership Sorting Block\n  getSortOwnership = () => {\n      if(this.state.sortType === 4) {\n          return <div className = \"sort-select\"><ThumbsUpDownIcon className = \"in-div\" /></div>;\n      } else {\n          return <div className = \"sort-not-selected\"><ThumbsUpDownIcon className = \"in-div\" /></div>;\n      }\n  }\n\n  //Renders App\n  render() {\n    const {isFetching} = this.state;\n    const {data: {loading, getList}} = this.props;\n\n    if (loading) {\n      return null;\n    }\n\n    return (\n      <div>\n        {\n          isFetching ? <div>Loading...</div> : (\n            <div>\n              <Header />\n              <div style = {{display: \"flex\"}}>\n                <div style = {{margin: \"auto\", width: \"80%\"}}>\n                  <Tabs className = \"tabs\" defaultIndex = {0} onSelect = {index => this.updateSortType(index)}>\n                    <TabList className = \"tab-list\">\n                        <Tab className = \"tab\">{this.getSortRank()}</Tab>\n                        <Tab className = \"tab\">{this.getSortName()}</Tab>\n                        <Tab className = \"tab\">{this.getSortPrice()}</Tab>\n                        <Tab className = \"tab\">{this.getSortColor()}</Tab>\n                        <Tab className = \"tab\">{this.getSortOwnership()}</Tab>\n                    </TabList>\n                    <TabPanel /><TabPanel /><TabPanel /><TabPanel /><TabPanel />\n                  </Tabs>\n                  <h1 className = \"wish-count\">Your Collection ({getList.length})</h1>\n                  {this.getOrder(getList).map(sneaker => (\n                      <ListItem key = {`${sneaker.id}-item`} sneaker = {sneaker} \n                      updateOwnership = {() => this.updateOwnership(sneaker)} \n                      delete = {() => this.deleteSneaker(sneaker)} wholeList = {getList}/>\n                  ))}\n                </div>\n              </div>\n              <Entry currentRank = {getList.length + 1}/>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\n//Exports Packages\nexport default compose(\n  graphql(RECEIVE),\n  graphql(UPDATE_OWNERSHIP, {name: 'updateOwnership'}),\n  graphql(DELETE, {name: 'deleteSneaker'})\n)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from \"apollo-boost\";\nimport {ApolloProvider} from \"react-apollo\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//New Client For Server (CURRENTLY LOCAL)\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\"\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client  = {client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}